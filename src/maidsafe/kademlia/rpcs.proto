import "maidsafe/transport/transport.proto";
import "maidsafe/kademlia/kademlia.proto";

package kademlia.protobuf;

message PingRequest {
  required bytes ping = 1;
  required Contact sender = 2;
}

message PingResponse {
  required bool result = 1;
  optional bytes echo = 2;
  optional bytes node_id = 3;
};

message FindRequest {
  required bytes key = 1;
  required Contact sender_info = 2;
  optional bool is_boostrap = 3;
  optional transport.protobuf.Endpoint sender_ext = 4;
};

message FindResponse {
  required bool result = 1;
  repeated bytes closest_nodes = 2;
  repeated bytes values = 3;
  repeated SignedValue signed_values = 4;
  optional Contact alternative_value_holder = 5;
  optional bytes needs_cache_copy = 6;
  optional bytes requester_ext_addr = 7;
  optional bytes node_id = 8;
};

message FindNodeResult {
  required bool result = 1;
  optional bytes contact = 2;
  optional bytes node_id = 3;
};

message StoreRequest {
  required bytes key = 1;
  optional bytes value = 2;
  optional SignedValue sig_value = 3;
  required int32 ttl = 4;
  required Contact sender = 5;
  required bool publish = 6;
  optional SignedRequest signed_request = 7;
};

message StoreResponse {
  required bool result = 1;
  optional bytes node_id = 2;
  optional SignedRequest signed_request = 3;
};

message DeleteRequest {
  required bytes key = 1;
  required SignedValue value = 2;
  required SignedRequest signed_request = 3;
  required Contact sender = 4;
};

message DeleteResponse {
  required bool result = 1;
  optional bytes node_id = 2;
};

message UpdateRequest {
  required bytes key = 1;
  required SignedValue new_value = 2;
  required SignedValue old_value = 3;
  required int32 ttl = 4;
  required SignedRequest request = 5;
  required Contact sender = 6;
};

message UpdateResponse {
  required bool result = 1;
  optional bytes node_id = 2;
};

message DownlistRequest {
  repeated bytes downlist = 1;
  required Contact sender = 2;
};

message DownlistResponse {
  required bool result = 1;
  optional bytes node_id = 2;
};
